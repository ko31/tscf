{"version":3,"sources":["editor.js","services/ui.js","modules/alert.js","modules/editor.js","modules/field.js","modules/items.js","modules/nav.js","modules/options.js"],"names":["jQuery","document","ready","$","angular","module","TSCF","template","name","this","endpoint","factory","toggle","target","toggleClass","directive","restrict","replace","scope","errors","templateUrl","link","$scope","$elem","attr","controller","$http","$log","index","settings","console","log","changeIndex","i","addGroup","length","push","label","new","type","post_types","context","priority","description","fields","saveFields","method","url","save","data","then","response","$window","ui","groups","currentIndex","postTypes","setting","changeCheckbox","types","find","each","input","val","addField","field","removeField","confirm","message","delete","splice","prop","cols","childTypes","hasOwnProperty","updateType","fillProp","changeType","move","current","step","next","tmp","copy","addChildField","options","hasKey","value","store","duplicated","$watch","l","add","remove"],"mappings":"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","file":"../editor.js","sourcesContent":["/**\n * Editor for TSCF\n */\n\n/*global TSCF: true*/\n/*global ace: false*/\n\njQuery(document).ready(function ($) {\n\n  \"use strict\";\n\n  /*\n   $.ajax({\n   type       : \"POST\",\n   url        : TSCF.endpoint,\n   processData: false,\n   contentType: 'application/json',\n   data       : editor.getValue()\n   */\n});\n\nangular.module('tscf', [ 'ui.sortable' ] );\n\n/**\n * Get template URL\n * @param {string} name\n * @returns {string}\n */\nTSCF.template = function(name){\n  \"use strict\";\n  return this.endpoint.template + '&file=' + name;\n};\n\nangular.module('tscf').factory('ui', function(){\n  \"use strict\";\n  return {\n    toggle: function(target){\n      jQuery( target ).toggleClass( 'toggle' );\n    }\n  };\n});\n\nangular.module('tscf').directive( 'tscfAlert',function(){\n  \"use strict\";\n  return {\n    restrict: 'E',\n    replace: false,\n    scope: {\n      errors: '='\n    },\n    templateUrl: TSCF.template('alert'),\n    link: function( $scope, $elem, attr ){\n\n    }\n  };\n});\n\n\n\n\nangular.module('tscf').controller( 'tscfEditor', [ '$scope', '$http', '$log', function($scope, $http, $log){\n\n  \"use strict\";\n\n  $scope.index = 0;\n\n  $scope.settings = TSCF.settings;\n\n  console.log(TSCF);\n\n  $scope.errors = TSCF.errors;\n\n  /**\n   * Change index\n   *\n   * @param i\n   */\n  $scope.changeIndex = function(i){\n    $scope.index = i;\n  };\n\n  /**\n   * Add Field Group\n   */\n  $scope.addGroup = function(){\n    var index = $scope.settings.length + 2;\n    $scope.settings.push({\n      name: \"new_group_\" + index,\n      label: TSCF.new + ' ' + index,\n      type: \"post\",\n      post_types: [],\n      context: 'side',\n      priority: \"default\",\n      description: \"\",\n      fields: []\n    });\n  };\n\n  $scope.saveFields = function(){\n    $http({\n      method: 'POST',\n      url: TSCF.endpoint.save,\n      data: $scope.settings\n    }).then(\n      function(response){\n        // Success\n        console.log(response);\n      },\n      function(response){\n        // Error\n      }\n    ).then(function(){\n      // Always\n    });\n  };\n\n\n\n\n} ] );\n\nangular.module('tscf').directive('tscfField', ['$http', '$window', 'ui', function($http, $window, ui){\n\n  \"use strict\";\n\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      groups: '=',\n      i: '=',\n      currentIndex: '='\n    },\n\n    templateUrl: TSCF.template('field'),\n\n    link: function($scope, $elem, attr){\n\n      $scope.postTypes = TSCF.postTypes;\n\n      $scope.context = TSCF.context;\n\n      $scope.priority = TSCF.priority;\n\n      $scope.setting = $scope.groups[$scope.i];\n\n      $scope.toggle = function(target){\n        ui.toggle(target);\n      };\n\n      /**\n       * Checkbox is changed\n       */\n      $scope.changeCheckbox = function(){\n        var types = [];\n        jQuery('#post-type-field-' + $scope.i).find('input:checked').each(function(i, input){\n          types.push(jQuery(input).val());\n        });\n        $scope.groups[$scope.i].post_types = types;\n      };\n\n      /**\n       * Add field to setting\n       *\n       */\n      $scope.addField = function(){\n        $http({\n          method: 'GET',\n          url: TSCF.endpoint.field + '&field=text'\n        }).then(\n          function(response){\n            var field = response.data.field;\n            field.type = 'text';\n            $scope.groups[$scope.i].fields.push( field );\n          },\n          function(response){\n            // Error\n          }\n        ).then(function(){\n          // Always\n        });\n      };\n\n      /**\n       * Remove element\n       *\n       */\n      $scope.removeField = function(){\n        if ( $window.confirm(TSCF.message.delete) ) {\n          if ( $scope.i == $scope.currentIndex) {\n            $scope.currentIndex = 0;\n          }\n          $scope.groups.splice($scope.i, 1);\n        }\n      };\n    }\n  };\n}]);\n\nangular.module('tscf').directive('tscfItems', [ '$http', '$window', 'ui', function($http, $window, ui){\n\n  'use strict';\n\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      fields: '=',\n      i: '='\n    },\n\n    templateUrl: TSCF.template('items'),\n    link: function($scope, $elem, attr){\n\n      $scope.cols = TSCF.cols;\n\n      $scope.types = [];\n\n      $scope.childTypes = [];\n\n      $scope.toggle = function(target){\n        ui.toggle(target);\n      };\n\n      for( var prop in TSCF.types ) {\n        if ( TSCF.types.hasOwnProperty(prop) ) {\n          $scope.types.push({\n            name: prop,\n            label: TSCF.types[prop]\n          });\n          switch ( prop ) {\n            case 'iterator':\n              // Skip\n              break;\n            default:\n              $scope.childTypes.push({\n                name : prop,\n                label: TSCF.types[prop]\n              });\n              break;\n          }\n        }\n      }\n\n      /**\n       * Fill field property\n       *\n       * @param {Number} i\n       * @param {Object} field\n       */\n      function fillProp( i, field ){\n        // Remove unexistent property\n        for ( var prop in $scope.fields[i] ) {\n          if ( 'type' != prop && ! field.hasOwnProperty( prop ) ) {\n            delete $scope.fields[i][prop];\n          }\n        }\n        // Add unsatisfied property.\n        for ( prop in field ) {\n          if ( ! $scope.fields[i].hasOwnProperty( prop ) ) {\n            $scope.fields[i][prop] = field[prop];\n          }\n        }\n      }\n\n      /**\n       *\n       * @param i\n       */\n      function updateType(i){\n        $http({\n          method: 'GET',\n          url: TSCF.endpoint.field + '&field=' + $scope.fields[i].type\n        }).then(\n          function(response){\n            var field = response.data.field;\n            fillProp( i, field );\n          },\n          function(response){\n            // Error\n          }\n        ).then(function(){\n          // Always\n        });\n\n      }\n\n      /**\n       * Get field\n       *\n       * @param {Number} i\n       */\n      $scope.changeType = function(i){\n        if ( 'custom' == $scope.fields[i].type ) {\n          return;\n        }\n        updateType(i);\n      };\n\n      /**\n       * Move field\n       * @param {Number} current\n       * @param {Number} step\n       */\n      $scope.move = function(current, step){\n        var next = current + step;\n        var tmp = angular.copy($scope.fields[next]);\n        $scope.fields[next] = $scope.fields[current];\n        $scope.fields[current] = tmp;\n      };\n\n      /**\n       * Remove field\n       *\n       * @param {Number} i\n       */\n      $scope.removeField = function(i){\n        if ( $window.confirm( TSCF.message.delete ) ) {\n          $scope.fields.splice(i, 1);\n        }\n      };\n\n      $scope.addChildField = function(i) {\n        if ( ! $scope.fields[i].fields ) {\n          $scope.fields[i].fields = [];\n        }\n        $scope.fields[i].fields.push({\n          \"name\": \"\",\n          \"label\": \"\",\n          \"type\": \"text\"\n        });\n      }\n\n    }\n  };\n}]);\n\n\n\nangular.module('tscf').directive('tscfNav', function(){\n  \"use strict\";\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      settings: '=',\n      index: '='\n    },\n    templateUrl: TSCF.template('nav'),\n    link: function($scope, $elem, attr){\n      $scope.changeIndex = function(i){\n        $scope.index = i;\n      };\n    }\n  };\n});\nangular.module('tscf').directive('tscfOptions', function () {\n  \"use strict\";\n  return {\n    restrict: 'E',\n\n    replace: true,\n\n    scope: {\n      options: '=',\n      hasKey : '@'\n    },\n\n    templateUrl: TSCF.template('options'),\n\n    link: function ($scope, $elem, attr) {\n\n      $scope.value = '';\n\n      $scope.store = [];\n\n      $scope.duplicated = false;\n\n      // 初期値を設定\n      for (var prop in $scope.options) {\n        if ($scope.options.hasOwnProperty(prop)) {\n\n          $scope.store.push({\n            value: prop,\n            label: $scope.options[prop]\n          });\n        }\n      }\n      /**\n       * オプションを更新する。\n       */\n      $scope.$watch('store', function () {\n        var options = {};\n        $scope.duplicated = false;\n        for (var i = 0, l = $scope.store.length; i < l; i++) {\n          if (!options.hasOwnProperty($scope.store[i].value)) {\n            options[$scope.store[i].value] = $scope.store[i].label;\n          } else {\n            $scope.duplicated = true;\n          }\n        }\n        $scope.options = options;\n      }, true);\n\n\n      /**\n       * 要素を追加する\n       * @returns {boolean}\n       */\n      $scope.add = function () {\n        if ($scope.duplicated) {\n          return false;\n        }\n        $scope.store.push({\n          value: $scope.value,\n          label: ''\n        });\n      };\n\n      /**\n       * 値を削除する\n       *\n       * @param {Number} index\n       */\n      $scope.remove = function (index) {\n        $scope.store.splice(index, 1);\n      };\n    }\n  };\n});\n\n\n\n\n","angular.module('tscf').factory('ui', function(){\n  \"use strict\";\n  return {\n    toggle: function(target){\n      jQuery( target ).toggleClass( 'toggle' );\n    }\n  };\n});\n","angular.module('tscf').directive( 'tscfAlert',function(){\n  \"use strict\";\n  return {\n    restrict: 'E',\n    replace: false,\n    scope: {\n      errors: '='\n    },\n    templateUrl: TSCF.template('alert'),\n    link: function( $scope, $elem, attr ){\n\n    }\n  };\n});\n\n\n\n","angular.module('tscf').controller( 'tscfEditor', [ '$scope', '$http', '$log', function($scope, $http, $log){\n\n  \"use strict\";\n\n  $scope.index = 0;\n\n  $scope.settings = TSCF.settings;\n\n  console.log(TSCF);\n\n  $scope.errors = TSCF.errors;\n\n  /**\n   * Change index\n   *\n   * @param i\n   */\n  $scope.changeIndex = function(i){\n    $scope.index = i;\n  };\n\n  /**\n   * Add Field Group\n   */\n  $scope.addGroup = function(){\n    var index = $scope.settings.length + 2;\n    $scope.settings.push({\n      name: \"new_group_\" + index,\n      label: TSCF.new + ' ' + index,\n      type: \"post\",\n      post_types: [],\n      context: 'side',\n      priority: \"default\",\n      description: \"\",\n      fields: []\n    });\n  };\n\n  $scope.saveFields = function(){\n    $http({\n      method: 'POST',\n      url: TSCF.endpoint.save,\n      data: $scope.settings\n    }).then(\n      function(response){\n        // Success\n        console.log(response);\n      },\n      function(response){\n        // Error\n      }\n    ).then(function(){\n      // Always\n    });\n  };\n\n\n\n\n} ] );\n","angular.module('tscf').directive('tscfField', ['$http', '$window', 'ui', function($http, $window, ui){\n\n  \"use strict\";\n\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      groups: '=',\n      i: '=',\n      currentIndex: '='\n    },\n\n    templateUrl: TSCF.template('field'),\n\n    link: function($scope, $elem, attr){\n\n      $scope.postTypes = TSCF.postTypes;\n\n      $scope.context = TSCF.context;\n\n      $scope.priority = TSCF.priority;\n\n      $scope.setting = $scope.groups[$scope.i];\n\n      $scope.toggle = function(target){\n        ui.toggle(target);\n      };\n\n      /**\n       * Checkbox is changed\n       */\n      $scope.changeCheckbox = function(){\n        var types = [];\n        jQuery('#post-type-field-' + $scope.i).find('input:checked').each(function(i, input){\n          types.push(jQuery(input).val());\n        });\n        $scope.groups[$scope.i].post_types = types;\n      };\n\n      /**\n       * Add field to setting\n       *\n       */\n      $scope.addField = function(){\n        $http({\n          method: 'GET',\n          url: TSCF.endpoint.field + '&field=text'\n        }).then(\n          function(response){\n            var field = response.data.field;\n            field.type = 'text';\n            $scope.groups[$scope.i].fields.push( field );\n          },\n          function(response){\n            // Error\n          }\n        ).then(function(){\n          // Always\n        });\n      };\n\n      /**\n       * Remove element\n       *\n       */\n      $scope.removeField = function(){\n        if ( $window.confirm(TSCF.message.delete) ) {\n          if ( $scope.i == $scope.currentIndex) {\n            $scope.currentIndex = 0;\n          }\n          $scope.groups.splice($scope.i, 1);\n        }\n      };\n    }\n  };\n}]);\n","angular.module('tscf').directive('tscfItems', [ '$http', '$window', 'ui', function($http, $window, ui){\n\n  'use strict';\n\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      fields: '=',\n      i: '='\n    },\n\n    templateUrl: TSCF.template('items'),\n    link: function($scope, $elem, attr){\n\n      $scope.cols = TSCF.cols;\n\n      $scope.types = [];\n\n      $scope.childTypes = [];\n\n      $scope.toggle = function(target){\n        ui.toggle(target);\n      };\n\n      for( var prop in TSCF.types ) {\n        if ( TSCF.types.hasOwnProperty(prop) ) {\n          $scope.types.push({\n            name: prop,\n            label: TSCF.types[prop]\n          });\n          switch ( prop ) {\n            case 'iterator':\n              // Skip\n              break;\n            default:\n              $scope.childTypes.push({\n                name : prop,\n                label: TSCF.types[prop]\n              });\n              break;\n          }\n        }\n      }\n\n      /**\n       * Fill field property\n       *\n       * @param {Number} i\n       * @param {Object} field\n       */\n      function fillProp( i, field ){\n        // Remove unexistent property\n        for ( var prop in $scope.fields[i] ) {\n          if ( 'type' != prop && ! field.hasOwnProperty( prop ) ) {\n            delete $scope.fields[i][prop];\n          }\n        }\n        // Add unsatisfied property.\n        for ( prop in field ) {\n          if ( ! $scope.fields[i].hasOwnProperty( prop ) ) {\n            $scope.fields[i][prop] = field[prop];\n          }\n        }\n      }\n\n      /**\n       *\n       * @param i\n       */\n      function updateType(i){\n        $http({\n          method: 'GET',\n          url: TSCF.endpoint.field + '&field=' + $scope.fields[i].type\n        }).then(\n          function(response){\n            var field = response.data.field;\n            fillProp( i, field );\n          },\n          function(response){\n            // Error\n          }\n        ).then(function(){\n          // Always\n        });\n\n      }\n\n      /**\n       * Get field\n       *\n       * @param {Number} i\n       */\n      $scope.changeType = function(i){\n        if ( 'custom' == $scope.fields[i].type ) {\n          return;\n        }\n        updateType(i);\n      };\n\n      /**\n       * Move field\n       * @param {Number} current\n       * @param {Number} step\n       */\n      $scope.move = function(current, step){\n        var next = current + step;\n        var tmp = angular.copy($scope.fields[next]);\n        $scope.fields[next] = $scope.fields[current];\n        $scope.fields[current] = tmp;\n      };\n\n      /**\n       * Remove field\n       *\n       * @param {Number} i\n       */\n      $scope.removeField = function(i){\n        if ( $window.confirm( TSCF.message.delete ) ) {\n          $scope.fields.splice(i, 1);\n        }\n      };\n\n      $scope.addChildField = function(i) {\n        if ( ! $scope.fields[i].fields ) {\n          $scope.fields[i].fields = [];\n        }\n        $scope.fields[i].fields.push({\n          \"name\": \"\",\n          \"label\": \"\",\n          \"type\": \"text\"\n        });\n      }\n\n    }\n  };\n}]);\n\n\n","angular.module('tscf').directive('tscfNav', function(){\n  \"use strict\";\n  return {\n    restrict: \"E\",\n    replace: true,\n    scope: {\n      settings: '=',\n      index: '='\n    },\n    templateUrl: TSCF.template('nav'),\n    link: function($scope, $elem, attr){\n      $scope.changeIndex = function(i){\n        $scope.index = i;\n      };\n    }\n  };\n});","angular.module('tscf').directive('tscfOptions', function () {\n  \"use strict\";\n  return {\n    restrict: 'E',\n\n    replace: true,\n\n    scope: {\n      options: '=',\n      hasKey : '@'\n    },\n\n    templateUrl: TSCF.template('options'),\n\n    link: function ($scope, $elem, attr) {\n\n      $scope.value = '';\n\n      $scope.store = [];\n\n      $scope.duplicated = false;\n\n      // 初期値を設定\n      for (var prop in $scope.options) {\n        if ($scope.options.hasOwnProperty(prop)) {\n\n          $scope.store.push({\n            value: prop,\n            label: $scope.options[prop]\n          });\n        }\n      }\n      /**\n       * オプションを更新する。\n       */\n      $scope.$watch('store', function () {\n        var options = {};\n        $scope.duplicated = false;\n        for (var i = 0, l = $scope.store.length; i < l; i++) {\n          if (!options.hasOwnProperty($scope.store[i].value)) {\n            options[$scope.store[i].value] = $scope.store[i].label;\n          } else {\n            $scope.duplicated = true;\n          }\n        }\n        $scope.options = options;\n      }, true);\n\n\n      /**\n       * 要素を追加する\n       * @returns {boolean}\n       */\n      $scope.add = function () {\n        if ($scope.duplicated) {\n          return false;\n        }\n        $scope.store.push({\n          value: $scope.value,\n          label: ''\n        });\n      };\n\n      /**\n       * 値を削除する\n       *\n       * @param {Number} index\n       */\n      $scope.remove = function (index) {\n        $scope.store.splice(index, 1);\n      };\n    }\n  };\n});\n\n\n\n"]}